diff --git a/SConstruct b/SConstruct
index ff91c69..09b8a73 100755
--- a/SConstruct
+++ b/SConstruct
@@ -282,6 +282,15 @@ if env["prereqs"]:
     conf.CheckLib("m")
     conf.CheckFunc("round")
 
+    if env['host'] == 'nacl64':
+#      env.Append(LINKFLAGS = ['-static', '-T',  'ldscripts/elf64_nacl.x.static'])
+      env.Append(LINKFLAGS = ['-Wl,--undefined=_ZN2pp12CreateModuleEv'])
+      env.Append(LIBS = ['-lpthread', '-lSDL', '-ldl', '-lppapi_cpp', '-ljpeg',
+                         '-lpng', '-ltiff', '-lexpat', '-lpixman-1',
+                         '-lvorbisfile', '-lvorbis', '-logg',
+                         '-lppruntime', '-lplatform', '-lgio',
+                         '-lsrpc'])
+
     have_server_prereqs = \
         conf.CheckCPlusPlus(gcc_version = "3.3") and \
         conf.CheckGettextLibintl() and \
@@ -349,6 +358,11 @@ else:
     test_env = env.Clone()
     client_env = env.Clone()
 
+
+if env['host'] == 'nacl64':
+  env['_LIBFLAGS'] = '-Wl,--start-group ' + env['_LIBFLAGS'] + ' -Wl,--end-group'
+  client_env['_LIBFLAGS'] = '-Wl,--start-group ' + client_env['_LIBFLAGS'] + ' -Wl,--end-group'
+
 have_msgfmt = env["MSGFMT"]
 if not have_msgfmt:
      env["nls"] = False
@@ -362,7 +376,7 @@ if not env['nls']:
 #
 
 for env in [test_env, client_env, env]:
-    env.Append(CPPPATH = ["#/", "#/src"])
+    env.Prepend(CPPPATH = ["#/", "#/src"])
 
     env.Append(CPPDEFINES = ["HAVE_CONFIG_H"])
 
@@ -433,7 +447,7 @@ else:
         env["svnrev"] = ""
 
 Export(Split("env client_env test_env have_client_prereqs have_server_prereqs have_test_prereqs"))
-SConscript(dirs = Split("po doc packaging/windows"))
+SConscript(dirs = Split("po doc packaging/windows ppapi"))
 
 binaries = Split("wesnoth wesnothd cutter exploder campaignd test")
 builds = {
diff --git a/build.sh b/build.sh
new file mode 100755
index 0000000..b6d1ce3
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+set -e -x
+
+ROOT=${NACL_TOOLCHAIN_ROOT:-$HOME/root/nacl-sdk}
+PATH=$ROOT/bin:$ROOT/nacl64/usr/bin:$PATH
+
+PKG_CONFIG_PATH=$ROOT/nacl64/usr/lib/pkgconfig scons -j5 host=nacl64 \
+  boostdir=$ROOT/nacl64/usr/include/boost \
+  boostlibdir=$ROOT/nacl64/usr/lib sdldir=$ROOT/nacl64/usr nls=no \
+  destdir=$ROOT/nacl64 \
+  build=debug wesnoth # install
diff --git a/ppapi/SConscript b/ppapi/SConscript
new file mode 100644
index 0000000..3ac34f7
--- /dev/null
+++ b/ppapi/SConscript
@@ -0,0 +1,18 @@
+import commands, os
+from subprocess import Popen, PIPE
+from glob import glob
+
+Import("*")
+
+for env in [test_env, client_env, env]:
+    env.Append(CPPDEFINES = "$EXTRA_DEFINE")
+
+libwesnoth_ppapi_sources = Split("""
+    wesnoth_pepper_instance.cc
+    wesnoth_pepper_module.cc
+    nacl_dir.cc
+    """)
+
+libwesnoth_ppapi = env.Library("wesnoth_ppapi", libwesnoth_ppapi_sources)
+
+Export("libwesnoth_ppapi")
diff --git a/ppapi/nacl_dir.cc b/ppapi/nacl_dir.cc
new file mode 100644
index 0000000..0866455
--- /dev/null
+++ b/ppapi/nacl_dir.cc
@@ -0,0 +1,181 @@
+#include "nacl_dir.h"
+
+#include <string>
+#include <string.h>
+#include <thread.hpp>
+
+#include <map>
+#include <set>
+#include <vector>
+
+typedef std::set<std::string> entries_t;
+typedef std::map<std::string, entries_t > dirs_t;
+
+struct NACL_DIR {
+  entries_t* entries;
+  entries_t::iterator next;
+  struct dirent dirent_;
+};
+
+
+static dirs_t dirs;
+static threading::mutex dirs_mutex;
+
+static std::string normalize_path(std::string path) {
+  size_t first = 0;
+  std::vector<std::string> parts;
+  while (first < path.size()) {
+    size_t next = path.find('/', first);
+    if (next == std::string::npos)
+      next = path.size();
+    std::string part = path.substr(first, next - first);
+    first = next + 1;
+    if (part == "..") {
+      if (parts.empty()) {
+	fprintf(stderr, "invalid path\n");
+	return "";
+      } else {
+	parts.pop_back();
+      }
+    } else if (part != "." && !part.empty()) {
+      parts.push_back(part);
+    }
+  }
+  std::string res;
+  for (unsigned i = 0; i < parts.size(); ++i) {
+    res += "/";
+    res += parts[i];
+  }
+  return res;
+}
+
+static void lazy_init_dirs(void) {
+  threading::lock lock(dirs_mutex);
+
+  static bool initialized = false;
+
+  if (initialized)
+    return;
+
+  FILE* fp = fopen("/.dirs", "r");
+  if (!fp) {
+    fprintf(stderr, "Could not read the directory index\n");
+    exit(1);
+  }
+
+  const int BUFSIZE = 1000;
+  char buf[BUFSIZE];
+  while (fgets(buf, BUFSIZE, fp)) {
+    // Replace the trailing \n with \0.
+    char* p = buf + strlen(buf) - 1;
+    if (p >= buf && *p == '\n')
+      *p = 0;
+
+    p = strrchr(buf, '/');
+    if (!p)
+      p = buf;
+    std::string dir_name(buf, p - buf);
+    std::string file_name(p + 1);
+    dir_name = normalize_path(dir_name);
+
+    entries_t& files = dirs[dir_name];
+    if (!file_name.empty()) {
+      files.insert(file_name);
+      // fprintf(stderr, "init: %s  /  %s\n", dir_name.c_str(), file_name.c_str());
+    }
+  }
+
+  fclose(fp);
+
+  fprintf(stderr, "nacl_dir initialized!\n");
+
+  initialized = true;
+}
+
+
+NACL_DIR* nacl_opendir(const char* fname) {
+  lazy_init_dirs();
+
+  std::string path = normalize_path(fname);
+
+  // fprintf(stderr, "opendir(%s) ...\n", path.c_str());
+
+  if (path.empty())
+    return NULL;
+  if (path[path.size() - 1] == '/')
+    path.resize(path.size() - 1);
+
+  dirs_t::iterator it = dirs.find(path);
+  if (it == dirs.end()) {
+    // fprintf(stderr, "opendir: not found: %s\n", path.c_str());
+    return NULL;
+  }
+
+  NACL_DIR* dir = new NACL_DIR();
+  dir->entries = &it->second;
+  dir->next = dir->entries->begin();
+  memset(&dir->dirent_, 0, sizeof(dir->dirent_));
+  // fprintf(stderr, "opendir(%s), success\n", fname);
+  return dir;
+}
+
+struct dirent* nacl_readdir(NACL_DIR* dirp) {
+  if (dirp->next == dirp->entries->end())
+    return NULL;
+  const std::string& file = *(dirp->next++);
+  strncpy(dirp->dirent_.d_name, file.c_str(), sizeof(dirp->dirent_.d_name));
+  return &(dirp->dirent_);
+}
+
+int nacl_closedir(NACL_DIR* dirp) {
+  delete dirp;
+  return 0;
+}
+
+int nacl_stat(const char *cpath, struct stat *buf) {
+  lazy_init_dirs();
+
+  std::string path = normalize_path(cpath);
+
+  // fprintf(stderr, "stat(%s) ...\n", path.c_str());
+
+  if (path.empty())
+    return -1;
+  if (path[path.size() - 1] == '/')
+    path.resize(path.size() - 1);
+
+  dirs_t::iterator d_it = dirs.find(path);
+  if (d_it != dirs.end()) {
+    memset(buf, 0, sizeof(*buf));
+    buf->st_mode = S_IFDIR | S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
+    // fprintf(stderr, "stat(%s), dir\n", path.c_str());
+    return 0;
+  }
+
+  size_t last_div = path.rfind('/');
+  if (last_div == std::string::npos) {
+    fprintf(stderr, "No / in path\n");
+    return -1;
+  }
+
+  std::string dir_name = path.substr(0, last_div);
+  d_it = dirs.find(dir_name);
+  if (d_it == dirs.end()) {
+    // fprintf(stderr, "Dir not found: %s\n", dir_name.c_str());
+    return -1;
+  }
+
+  std::string file_name = path.substr(last_div + 1);
+  entries_t& entries = d_it->second;
+  entries_t::iterator e_it = entries.find(file_name);
+  if (e_it != entries.end()) {
+    memset(buf, 0, sizeof(*buf));
+    buf->st_mode = S_IFREG | S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
+    // fprintf(stderr, "stat(%s), file\n", path.c_str());
+    return 0;
+  }
+
+  // fprintf(stderr, "File not found in dir: %s  /  %s\n", dir_name.c_str(), file_name.c_str());
+
+  return -1;
+}
diff --git a/ppapi/nacl_dir.h b/ppapi/nacl_dir.h
new file mode 100644
index 0000000..a36d0e2
--- /dev/null
+++ b/ppapi/nacl_dir.h
@@ -0,0 +1,12 @@
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <stdio.h>
+
+struct NACL_DIR;
+
+NACL_DIR* nacl_opendir(const char* fname);
+struct dirent* nacl_readdir(NACL_DIR* dirp);
+int nacl_closedir(NACL_DIR* dirp);
+int nacl_stat(const char *path, struct stat *buf);
diff --git a/ppapi/wesnoth_pepper_instance.cc b/ppapi/wesnoth_pepper_instance.cc
new file mode 100644
index 0000000..d11b215
--- /dev/null
+++ b/ppapi/wesnoth_pepper_instance.cc
@@ -0,0 +1,139 @@
+// Copyright 2010 The Native Client Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can
+// be found in the LICENSE file.
+
+#include "wesnoth_pepper_instance.h"
+
+#include <ppapi/cpp/completion_callback.h>
+#include <ppapi/cpp/var.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <cassert>
+#include <cmath>
+#include <cstring>
+
+// extern "C" {
+#include <SDL_video.h>
+//extern int jumpnbump_main(int argc, char *argv[]);
+extern int wesnoth_main(int argc,char *argv[]);
+  // temporary hacks
+#include <SDL.h>
+#include <SDL_nacl.h>
+// }
+
+namespace {
+const int kPthreadMutexSuccess = 0;
+const char* const kPaintMethodId = "paint";
+const double kInvalidPiValue = -1.0;
+
+// This is called by the brower when the 2D context has been flushed to the
+// browser window.
+void FlushCallback(void* data, int32_t result) {
+  (void)result;
+  static_cast<wesnoth_pepper::WesnothPepperInstance*>(data)->set_flush_pending(false);
+}
+}  // namespace
+
+namespace wesnoth_pepper {
+
+WesnothPepperInstance::WesnothPepperInstance(PP_Instance instance)
+    : pp::Instance(instance),
+      graphics_2d_context_(NULL),
+      flush_pending_(false),
+      quit_(false),
+      compute_pi_thread_(0),
+      width_(0),
+      height_(0),
+      pi_(0.0) {
+
+  printf("ctor\n");
+}
+
+WesnothPepperInstance::~WesnothPepperInstance() {
+  quit_ = true;
+  if (compute_pi_thread_) {
+    pthread_join(compute_pi_thread_, NULL);
+  }
+  // DestroyContext();
+}
+
+void WesnothPepperInstance::DidChangeView(const pp::Rect& position,
+                                const pp::Rect& clip) {
+
+  fprintf(stderr, "did change view, new %dx%d, old %dx%d\n", position.size().width(), position.size().height(),
+      width_, height_);
+  fflush(stderr);
+  fsync(fileno(stderr));
+
+  if (width_ && height_)
+    return;
+
+  if (position.size().width() == width_ &&
+      position.size().height() == height_)
+    return;  // Size didn't change, no need to update anything.
+
+  width_ = position.size().width();
+  height_ = position.size().height();
+
+  printf("didchangeview, instance %p %p\n", this, static_cast<pp::Instance*>(this));
+  SDL_NACL_SetInstance(pp_instance(), width_, height_);
+  int lval = SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);
+  // int lval = SDL_Init(SDL_INIT_VIDEO);
+  assert(lval >= 0);
+  pthread_create(&compute_pi_thread_, NULL, ComputePi, this);
+}
+
+pp::Var WesnothPepperInstance::GetInstanceObject() {
+  WesnothPepperInstanceScriptObject* script_object = new WesnothPepperInstanceScriptObject(this);
+  return pp::Var(this, script_object);
+}
+
+bool WesnothPepperInstance::HandleInputEvent(const PP_InputEvent& event) {
+  SDL_NACL_PushEvent(&event);
+  return true;
+}
+
+bool WesnothPepperInstance::Init(uint32_t argc, const char* argn[], const char* argv[]) {
+  // pthread_create(&compute_pi_thread_, NULL, ComputePi, this);
+  return true;
+}
+
+pp::Var WesnothPepperInstance::Paint() {
+  return pp::Var(pi());
+}
+
+bool WesnothPepperInstance::WesnothPepperInstanceScriptObject::HasMethod(
+    const pp::Var& method,
+    pp::Var* exception) {
+  if (!method.is_string()) {
+    return false;
+  }
+  std::string method_name = method.AsString();
+  return method_name == kPaintMethodId;
+}
+
+pp::Var WesnothPepperInstance::WesnothPepperInstanceScriptObject::Call(
+    const pp::Var& method,
+    const std::vector<pp::Var>& args,
+    pp::Var* exception) {
+  if (!method.is_string()) {
+    return false;
+  }
+  std::string method_name = method.AsString();
+  if (app_instance_ != NULL && method_name == kPaintMethodId) {
+    return app_instance_->Paint();
+  }
+  return pp::Var();
+}
+
+void* WesnothPepperInstance::ComputePi(void* param) {
+
+  static char const * argv[] = {"wesnoth", NULL};
+  printf("starting game thread\n");
+  wesnoth_main(1, (char**)argv);
+
+  return NULL;
+}
+
+}  // namespace wesnoth_pepper
diff --git a/ppapi/wesnoth_pepper_instance.h b/ppapi/wesnoth_pepper_instance.h
new file mode 100644
index 0000000..6426e70
--- /dev/null
+++ b/ppapi/wesnoth_pepper_instance.h
@@ -0,0 +1,121 @@
+// Copyright 2010 The Native Client Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can
+// be found in the LICENSE file.
+
+#ifndef EXAMPLES_WESNOTH_PEPPER_H_
+#define EXAMPLES_WESNOTH_PEPPER_H_
+
+#include <ppapi/cpp/graphics_2d.h>
+#include <ppapi/cpp/image_data.h>
+#include <ppapi/cpp/instance.h>
+#include <ppapi/cpp/rect.h>
+#include <ppapi/cpp/dev/scriptable_object_deprecated.h>
+#include <ppapi/cpp/size.h>
+#include <pthread.h>
+
+#include <map>
+#include <vector>
+
+namespace wesnoth_pepper {
+
+// The Instance class.  One of these exists for each instance of your NaCl
+// module on the web page.  The browser will ask the Module object to create
+// a new Instance for each occurence of the <embed> tag that has these
+// attributes:
+//     type="application/x-ppapi-nacl-srpc"
+//     nexes="ARM: wesnoth_pepper_arm.nexe
+//            ..."
+// The Instance can return a ScriptableObject representing itself.  When the
+// browser encounters JavaScript that wants to access the Instance, it calls
+// the GetInstanceObject() method.  All the scripting work is done though
+// the returned ScriptableObject.
+class WesnothPepperInstance : public pp::Instance {
+ public:
+  explicit WesnothPepperInstance(PP_Instance instance);
+  virtual ~WesnothPepperInstance();
+
+  // Start up the ComputePi() thread.
+  virtual bool Init(uint32_t argc, const char* argn[], const char* argv[]);
+
+  // Update the graphcs context to the new size, and regnerate |pixel_buffer_|
+  // to fit the new size as well.
+  virtual void DidChangeView(const pp::Rect& position, const pp::Rect& clip);
+
+  // The pp::Var takes over ownership of the returned script object.
+  virtual pp::Var GetInstanceObject();
+
+  virtual bool HandleInputEvent(const PP_InputEvent& event);
+
+  // Flushes its contents of |pixel_buffer_| to the 2D graphics context.  The
+  // ComputePi() thread fills in |pixel_buffer_| pixels as it computes Pi.
+  // This method is called in response to the "paint()" method being called
+  // from JavaScript.  Returns the current value of pi as computed by the
+  // Monte Carlo method.
+  pp::Var Paint();
+
+  bool quit() const {
+    return quit_;
+  }
+
+  // |pi_| is computed in the ComputePi() thread.
+  double pi() const {
+    return pi_;
+  }
+
+  // Indicate whether a flush is pending.  This can only be called from the
+  // main thread; it is not thread safe.
+  bool flush_pending() const {
+    return flush_pending_;
+  }
+  void set_flush_pending(bool flag) {
+    flush_pending_ = flag;
+  }
+
+ private:
+  // This class exposes the scripting interface for this NaCl module.  The
+  // HasMethod method is called by the browser when executing a method call on
+  // the |piGenerator| object (see, e.g. the paint() function in
+  // wesnoth_pepper.html).  The name of the JavaScript function (e.g. "paint") is
+  // passed in the |method| paramter as a string pp::Var.  If HasMethod()
+  // returns |true|, then the browser will call the Call() method to actually
+  // invoke the method.
+  class WesnothPepperInstanceScriptObject : public pp::deprecated::ScriptableObject {
+   public:
+    explicit WesnothPepperInstanceScriptObject(WesnothPepperInstance* app_instance)
+        : pp::deprecated::ScriptableObject(),
+          app_instance_(app_instance) {}
+    virtual ~WesnothPepperInstanceScriptObject() {}
+    // Return |true| if |method| is one of the exposed method names.
+    virtual bool HasMethod(const pp::Var& method, pp::Var* exception);
+
+    // Invoke the function associated with |method|.  The argument list passed
+    // in via JavaScript is marshaled into a vector of pp::Vars.  None of the
+    // functions in this example take arguments, so this vector is always empty.
+    virtual pp::Var Call(const pp::Var& method,
+                         const std::vector<pp::Var>& args,
+                         pp::Var* exception);
+   private:
+    WesnothPepperInstance* app_instance_;  // weak reference.
+  };
+
+  mutable pthread_mutex_t pixel_buffer_mutex_;
+  pp::Graphics2D* graphics_2d_context_;
+  pp::ImageData* pixel_buffer_;
+  bool flush_pending_;
+  bool quit_;
+  pthread_t compute_pi_thread_;
+  double pi_;
+  int width_;
+  int height_;
+
+  // ComputePi() estimates Pi using Monte Carlo method and it is executed by a
+  // separate thread created in SetWindow(). ComputePi() puts kMaxPointCount
+  // points inside the square whose length of each side is 1.0, and calculates
+  // the ratio of the number of points put inside the inscribed quadrant divided
+  // by the total number of random points to get Pi/4.
+  static void* ComputePi(void* param);
+};
+
+}  // namespace wesnoth_pepper
+
+#endif  // EXAMPLES_WESNOTH_PEPPER_H_
diff --git a/ppapi/wesnoth_pepper_module.cc b/ppapi/wesnoth_pepper_module.cc
new file mode 100644
index 0000000..f74f53e
--- /dev/null
+++ b/ppapi/wesnoth_pepper_module.cc
@@ -0,0 +1,34 @@
+// Copyright 2010 The Native Client SDK Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can
+// be found in the LICENSE file.
+
+#include <ppapi/cpp/module.h>
+#include <stdio.h>
+#include "wesnoth_pepper_instance.h"
+
+namespace wesnoth_pepper {
+// The Module class.  The browser calls the CreateInstance() method to create
+// an instance of you NaCl module on the web page.  The browser creates a new
+// instance for each <embed> tag with type="application/x-ppapi-nacl-srpc".
+class WesnothPepperModule : public pp::Module {
+ public:
+  WesnothPepperModule() : pp::Module() {}
+  virtual ~WesnothPepperModule() {}
+
+  virtual pp::Instance* CreateInstance(PP_Instance instance) {
+    return new WesnothPepperInstance(instance);
+  }
+};
+}  // namespace wesnoth_pepper
+
+// Factory function called by the browser when the module is first loaded.
+// The browser keeps a singleton of this module.  It calls the
+// CreateInstance() method on the object you return to make instances.  There
+// is one instance per <embed> tag on the page.  This is the main binding
+// point for your NaCl module with the browser.
+namespace pp {
+Module* CreateModule() {
+  printf("CreateModule\n");
+  return new wesnoth_pepper::WesnothPepperModule();
+}
+}  // namespace pp
diff --git a/scons/config_check_utils.py b/scons/config_check_utils.py
index b566791..5484ad5 100644
--- a/scons/config_check_utils.py
+++ b/scons/config_check_utils.py
@@ -14,5 +14,5 @@ def restore_env(env, backup):
 
 def find_include(prefixes, include_file, include_subdir, default_prefixes = True):
     if default_prefixes:
-        prefixes = ["/usr", "/usr/local", "/sw", "/sw/local"] + prefixes
+        prefixes = prefixes + ["/usr", "/usr/local", "/sw", "/sw/local"]
     return [(prefix, include) for prefix in prefixes for include in glob(join(prefix, "include", include_subdir, include_file))]
diff --git a/src/SConscript b/src/SConscript
index 1b61ede..9a01526 100644
--- a/src/SConscript
+++ b/src/SConscript
@@ -461,7 +461,7 @@ for env in [test_env, client_env, env]:
 
 game_cpp = client_env.Object("game.cpp", EXTRA_DEFINE = not env["pool_alloc"] and "DISABLE_POOL_ALLOC" or None);
 
-client_env.WesnothProgram("wesnoth", [game_cpp] + [libwesnoth_extras, libwesnoth_core, libwesnoth_sdl, libwesnoth, env["wesnoth_res"]], have_client_prereqs)
+client_env.WesnothProgram("wesnoth", [game_cpp] + [libwesnoth_extras, libwesnoth_core, libwesnoth_sdl, libwesnoth, libwesnoth_ppapi, env["wesnoth_res"]], have_client_prereqs)
 
 campaignd_sources = Split("""
     server/input_stream.cpp
diff --git a/src/filesystem.cpp b/src/filesystem.cpp
index 028ff43..3b3a789 100644
--- a/src/filesystem.cpp
+++ b/src/filesystem.cpp
@@ -54,6 +54,8 @@ BPath be_path;
 // for strerror
 #include <cstring>
 
+#include "ppapi/nacl_dir.h"
+
 #include "config.hpp"
 #include "filesystem.hpp"
 #include "foreach.hpp"
@@ -90,6 +92,7 @@ bool ends_with(const std::string& str, const std::string& suffix)
 	return str.size() >= suffix.size() && std::equal(suffix.begin(),suffix.end(),str.end()-suffix.size());
 }
 
+
 void get_files_in_dir(const std::string &directory,
 					  std::vector<std::string>* files,
 					  std::vector<std::string>* dirs,
@@ -98,6 +101,7 @@ void get_files_in_dir(const std::string &directory,
 					  file_reorder_option reorder,
 					  file_tree_checksum* checksum)
 {
+  // std::cerr << "get_files_in_dir: " << directory << "\n";
 	// If we have a path to find directories in,
 	// then convert relative pathnames to be rooted
 	// on the wesnoth path
@@ -125,7 +129,7 @@ void get_files_in_dir(const std::string &directory,
 		else
 			maincfg = (directory + "/") + maincfg_filename;
 
-		if (::stat(maincfg.c_str(), &st) != -1) {
+		if (nacl_stat(maincfg.c_str(), &st) != -1) {
 			LOG_FS << "_main.cfg found : " << maincfg << '\n';
 			if (files != NULL) {
 				if (mode == ENTIRE_FILE_PATH)
@@ -137,14 +141,14 @@ void get_files_in_dir(const std::string &directory,
 		}
 	}
 
-	DIR* dir = opendir(directory.c_str());
+	NACL_DIR* dir = nacl_opendir(directory.c_str());
 
 	if(dir == NULL) {
 		return;
 	}
 
 	struct dirent* entry;
-	while((entry = readdir(dir)) != NULL) {
+	while((entry = nacl_readdir(dir)) != NULL) {
 		if(entry->d_name[0] == '.')
 			continue;
 #ifdef __APPLE__
@@ -178,7 +182,7 @@ void get_files_in_dir(const std::string &directory,
 		else
 			fullname = directory + "/" + basename;
 
-		if (::stat(fullname.c_str(), &st) != -1) {
+		if (nacl_stat(fullname.c_str(), &st) != -1) {
 			if (S_ISREG(st.st_mode)) {
 				if (files != NULL) {
 					if (mode == ENTIRE_FILE_PATH)
@@ -199,7 +203,7 @@ void get_files_in_dir(const std::string &directory,
 					continue;
 
 				if (reorder == DO_REORDER &&
-						::stat((fullname+"/"+maincfg_filename).c_str(), &st)!=-1 &&
+						nacl_stat((fullname+"/"+maincfg_filename).c_str(), &st)!=-1 &&
 						S_ISREG(st.st_mode)) {
 					LOG_FS << "_main.cfg found : ";
 					if (files != NULL) {
@@ -224,7 +228,7 @@ void get_files_in_dir(const std::string &directory,
 		}
 	}
 
-	closedir(dir);
+	nacl_closedir(dir);
 
 	if(files != NULL)
 		std::sort(files->begin(),files->end());
@@ -327,11 +331,11 @@ std::string get_next_filename(const std::string& name, const std::string& extens
 
 std::string get_dir(const std::string& dir_path)
 {
-	DIR* dir = opendir(dir_path.c_str());
+	NACL_DIR* dir = nacl_opendir(dir_path.c_str());
 	if(dir == NULL) {
 		const int res = mkdir(dir_path.c_str(),AccessMode);
 		if(res == 0) {
-			dir = opendir(dir_path.c_str());
+			dir = nacl_opendir(dir_path.c_str());
 		} else {
 			ERR_FS << "could not open or create directory: " << dir_path << '\n';
 		}
@@ -340,7 +344,7 @@ std::string get_dir(const std::string& dir_path)
 	if(dir == NULL)
 		return "";
 
-	closedir(dir);
+	nacl_closedir(dir);
 
 	return dir_path;
 }
@@ -595,12 +599,12 @@ static void setup_user_data_dir()
 
 	const bool res = create_directory_if_missing(dir_path);
 	// probe read permissions (if we could make the directory)
-	DIR* const dir = res ? opendir(dir_path.c_str()) : NULL;
+	NACL_DIR* const dir = res ? nacl_opendir(dir_path.c_str()) : NULL;
 	if(dir == NULL) {
 		ERR_FS << "could not open or create preferences directory at " << dir_path << '\n';
 		return;
 	}
-	closedir(dir);
+	nacl_closedir(dir);
 
 	// Create user data and add-on directories
 	create_directory_if_missing(dir_path + "/editor");
@@ -778,7 +782,7 @@ static bool is_directory_internal(const std::string& fname)
 
 #else
 	struct stat dir_stat;
-	if(::stat(fname.c_str(), &dir_stat) == -1) {
+	if(nacl_stat(fname.c_str(), &dir_stat) == -1) {
 		return false;
 	}
 	return S_ISDIR(dir_stat.st_mode);
@@ -802,17 +806,17 @@ bool file_exists(const std::string& name)
 {
 #ifdef _WIN32
        struct stat st;
-       return (::stat(name.c_str(), &st) == 0);
+       return (nacl_stat(name.c_str(), &st) == 0);
 #else
 	struct stat st;
-	return (::stat(name.c_str(), &st) != -1);
+	return (nacl_stat(name.c_str(), &st) != -1);
 #endif
 }
 
 time_t file_create_time(const std::string& fname)
 {
 	struct stat buf;
-	if(::stat(fname.c_str(),&buf) == -1)
+	if(nacl_stat(fname.c_str(),&buf) == -1)
 		return 0;
 
 	return buf.st_mtime;
@@ -884,7 +888,7 @@ const file_tree_checksum& data_tree_checksum(bool reset)
 int file_size(const std::string& fname)
 {
 	struct stat buf;
-	if(::stat(fname.c_str(),&buf) == -1)
+	if(nacl_stat(fname.c_str(),&buf) == -1)
 		return -1;
 
 	return buf.st_size;
@@ -1027,10 +1031,10 @@ const std::vector<std::string>& get_binary_paths(const std::string& type)
 
 std::string get_binary_file_location(const std::string& type, const std::string& filename)
 {
-	DBG_FS << "Looking for '" << filename << "'.\n";
+	// ERR_FS << "Looking for '" << filename << "'.\n";
 
 	if (filename.empty()) {
-		LOG_FS << "  invalid filename (type: " << type <<")\n";
+		ERR_FS << "  invalid filename (type: " << type <<")\n";
 		return std::string();
 	}
 
@@ -1039,7 +1043,7 @@ std::string get_binary_file_location(const std::string& type, const std::string&
 	std::string::size_type pos = filename.rfind("../");
 	if (pos != std::string::npos) {
 		std::string nf = filename.substr(pos + 3);
-		LOG_FS << "Illegal path '" << filename << "' replaced by '" << nf << "'\n";
+		ERR_FS << "Illegal path '" << filename << "' replaced by '" << nf << "'\n";
 		return get_binary_file_location(type, nf);
 	}
 
@@ -1051,23 +1055,23 @@ std::string get_binary_file_location(const std::string& type, const std::string&
 	foreach (const std::string &path, get_binary_paths(type))
 	{
 		const std::string file = path + filename;
-		DBG_FS << "  checking '" << path << "'\n";
+		// ERR_FS << "  checking '" << path << "'\n";
 		if(file_exists(file)) {
-			DBG_FS << "  found at '" << file << "'\n";
+			// ERR_FS << "  found at '" << file << "'\n";
 			return file;
 		}
 	}
 
-	DBG_FS << "  not found\n";
+	ERR_FS << "  not found: " << filename << "\n";
 	return std::string();
 }
 
 std::string get_binary_dir_location(const std::string &type, const std::string &filename)
 {
-	DBG_FS << "Looking for '" << filename << "'.\n";
+	// ERR_FS << "Looking for '" << filename << "'.\n";
 
 	if (filename.empty()) {
-		LOG_FS << "  invalid filename (type: " << type <<")\n";
+		ERR_FS << "  invalid filename (type: " << type <<")\n";
 		return std::string();
 	}
 
@@ -1079,25 +1083,25 @@ std::string get_binary_dir_location(const std::string &type, const std::string &
 	foreach (const std::string &path, get_binary_paths(type))
 	{
 		const std::string file = path + filename;
-		DBG_FS << "  checking '" << path << "'\n";
+		// ERR_FS << "  checking '" << path << "'\n";
 		if (is_directory(file)) {
-			DBG_FS << "  found at '" << file << "'\n";
+			// ERR_FS << "  found at '" << file << "'\n";
 			return file;
 		}
 	}
 
-	DBG_FS << "  not found\n";
+	ERR_FS << "  not found: " << filename << "\n";
 	return std::string();
 }
 
 std::string get_wml_location(const std::string &filename, const std::string &current_dir)
 {
-	DBG_FS << "Looking for '" << filename << "'.\n";
+	// ERR_FS << "wml Looking for '" << filename << "'.\n";
 
 	std::string result;
 
 	if (filename.empty()) {
-		LOG_FS << "  invalid filename\n";
+		ERR_FS << "  invalid filename\n";
 		return result;
 	}
 
@@ -1112,7 +1116,7 @@ std::string get_wml_location(const std::string &filename, const std::string &cur
 	{
 		// If the filename starts with '~', look in the user data directory.
 		result = get_user_data_dir() + "/data/" + filename.substr(1);
-		DBG_FS << "  trying '" << result << "'\n";
+		// ERR_FS << "  trying '" << result << "'\n";
 
 		already_found = file_exists(result) || is_directory(result);
 	}
@@ -1125,16 +1129,16 @@ std::string get_wml_location(const std::string &filename, const std::string &cur
 	else if (!game_config::path.empty())
 		result = game_config::path + "/data/" + filename;
 
-	DBG_FS << "  trying '" << result << "'\n";
+	// ERR_FS << "  trying '" << result << "'\n";
 
 	if (result.empty() ||
 	    (!already_found && !file_exists(result) && !is_directory(result)))
 	{
-		DBG_FS << "  not found\n";
+		// ERR_FS << "  not found\n";
 		result.clear();
 	}
-	else
-		DBG_FS << "  found: '" << result << "'\n";
+	// else
+	// 	ERR_FS << "  found: '" << result << "'\n";
 
 	return result;
 }
diff --git a/src/font.cpp b/src/font.cpp
index c2e4dfe..777d0c7 100644
--- a/src/font.cpp
+++ b/src/font.cpp
@@ -346,12 +346,18 @@ void manager::update_font_path() const
 void manager::init() const
 {
 #ifdef CAIRO_HAS_FT_FONT
-	if (!FcConfigAppFontAddDir(FcConfigGetCurrent(),
-		reinterpret_cast<const FcChar8 *>((game_config::path + "/fonts").c_str())))
-	{
-		ERR_FT << "Could not load the true type fonts\n";
-		throw error();
-	}
+	// if (!FcConfigAppFontAddDir(FcConfigGetCurrent(),
+	// 	reinterpret_cast<const FcChar8 *>((game_config::path + "/fonts").c_str())))
+	// {
+	// 	ERR_FT << "Could not load the true type fonts\n";
+	// 	throw error();
+	// }
+  FcConfigAppFontAddFile(FcConfigGetCurrent(),
+			 reinterpret_cast<const FcChar8 *>((game_config::path + "/fonts/wqy-zenhei.ttc").c_str()));
+  FcConfigAppFontAddFile(FcConfigGetCurrent(),
+			 reinterpret_cast<const FcChar8 *>((game_config::path + "/fonts/DejaVuSans.ttf").c_str()));
+  FcConfigAppFontAddFile(FcConfigGetCurrent(),
+			 reinterpret_cast<const FcChar8 *>((game_config::path + "/fonts/Andagii.ttf").c_str()));
 #endif
 
 #if CAIRO_HAS_WIN32_FONT
diff --git a/src/game.cpp b/src/game.cpp
index 580e545..985a976 100644
--- a/src/game.cpp
+++ b/src/game.cpp
@@ -2403,7 +2403,7 @@ void init_custom_malloc();
 }
 #endif
 
-int main(int argc, char** argv)
+int wesnoth_main(int argc, char** argv)
 {
 #ifndef DISABLE_POOL_ALLOC
 	init_custom_malloc();
@@ -2461,4 +2461,3 @@ int main(int argc, char** argv)
 
 	return 0;
 } // end main
-
diff --git a/src/language.cpp b/src/language.cpp
index 08b20fd..1be9537 100644
--- a/src/language.cpp
+++ b/src/language.cpp
@@ -93,7 +93,8 @@ bool load_language_list()
 	try {
 		scoped_istream stream = preprocess_file(get_wml_location("hardwired/language.cfg"));
 		read(cfg, *stream);
-	} catch(config::error &) {
+	} catch(config::error & e) {
+	  std::cerr << "caught config::error" << e.message << "\n";
 		return false;
 	}
 
