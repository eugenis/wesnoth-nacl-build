diff --git a/SConstruct b/SConstruct
index ff91c69..b576929 100755
--- a/SConstruct
+++ b/SConstruct
@@ -282,6 +282,15 @@ if env["prereqs"]:
     conf.CheckLib("m")
     conf.CheckFunc("round")
 
+    if env['host'] in ['x86_64-nacl', 'i686-nacl']:
+#      env.Append(LINKFLAGS = ['-static', '-T',  'ldscripts/elf64_nacl.x.static'])
+      env.Append(LINKFLAGS = ['-Wl,--undefined=_ZN2pp12CreateModuleEv'])
+      env.Append(LIBS = ['-lpthread', '-lSDL', '-ldl', '-lppapi', '-lppapi_cpp',
+                         '-lnacl-mounts', '-ljpeg',
+                         '-lpng', '-ltiff', '-lexpat', '-lpixman-1',
+                         '-lvorbisfile', '-lvorbis', '-logg', '-lmikmod'
+                         ])
+
     have_server_prereqs = \
         conf.CheckCPlusPlus(gcc_version = "3.3") and \
         conf.CheckGettextLibintl() and \
@@ -349,6 +358,11 @@ else:
     test_env = env.Clone()
     client_env = env.Clone()
 
+
+if env['host'] in ['x86_64-nacl', 'i686-nacl']:
+  env['_LIBFLAGS'] = '-Wl,--start-group ' + env['_LIBFLAGS'] + ' -Wl,--end-group'
+  client_env['_LIBFLAGS'] = '-Wl,--start-group ' + client_env['_LIBFLAGS'] + ' -Wl,--end-group'
+
 have_msgfmt = env["MSGFMT"]
 if not have_msgfmt:
      env["nls"] = False
@@ -362,7 +376,7 @@ if not env['nls']:
 #
 
 for env in [test_env, client_env, env]:
-    env.Append(CPPPATH = ["#/", "#/src"])
+    env.Prepend(CPPPATH = ["#/", "#/src"])
 
     env.Append(CPPDEFINES = ["HAVE_CONFIG_H"])
 
@@ -433,7 +447,7 @@ else:
         env["svnrev"] = ""
 
 Export(Split("env client_env test_env have_client_prereqs have_server_prereqs have_test_prereqs"))
-SConscript(dirs = Split("po doc packaging/windows"))
+SConscript(dirs = Split("po doc packaging/windows ppapi"))
 
 binaries = Split("wesnoth wesnothd cutter exploder campaignd test")
 builds = {
diff --git a/build.sh b/build.sh
new file mode 100755
index 0000000..495fa86
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+set -e -x
+
+ROOT=${NACL_TOOLCHAIN_ROOT:-$HOME/root/nacl-sdk}
+PATH=$ROOT/bin:$ROOT/x86_64-nacl/usr/bin:$PATH
+
+PKG_CONFIG_PATH=$ROOT/x86_64-nacl/usr/lib/pkgconfig scons -j15 host=x86_64-nacl \
+  boostdir=$ROOT/x86_64-nacl/usr/include/boost \
+  boostlibdir=$ROOT/x86_64-nacl/usr/lib sdldir=$ROOT/x86_64-nacl/usr nls=no \
+  destdir=$ROOT/x86_64-nacl \
+  build=release wesnoth # install
diff --git a/build32.sh b/build32.sh
new file mode 100755
index 0000000..c51819c
--- /dev/null
+++ b/build32.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+set -e -x
+
+ROOT=${NACL_TOOLCHAIN_ROOT:-$HOME/root/nacl-sdk}
+PATH=$ROOT/bin:$ROOT/i686-nacl/usr/bin:$PATH
+
+PKG_CONFIG_PATH=$ROOT/i686-nacl/usr/lib/pkgconfig scons -j15 host=i686-nacl \
+  boostdir=$ROOT/i686-nacl/usr/include/boost \
+  boostlibdir=$ROOT/i686-nacl/usr/lib sdldir=$ROOT/i686-nacl/usr nls=no \
+  destdir=$ROOT/i686-nacl \
+  build=release wesnoth # install
diff --git a/buildpack.py b/buildpack.py
new file mode 100755
index 0000000..b2bbc67
--- /dev/null
+++ b/buildpack.py
@@ -0,0 +1,116 @@
+#!/usr/bin/python
+
+import shutil
+import glob
+import os
+import fnmatch
+import sys
+
+
+# pack description format: [root_mask, file_name_mask, file_path_exclusion_mask]
+# pack will contain 
+#   all files under (and including) the expansion of root_mask,
+#   whose names match file_name_mask,
+#   whose full path (with root_mask) does not match full_path_exclusion_mask
+pack0_masks = [
+    ['data/languages', '*', ''],
+    ['data/hardwired', '*', ''],
+    ['images/game-icon.png', '*', ''],
+    ['images/cursors-bw', '*', ''],
+    ['images/misc/logo.png', '*', ''],
+    ]
+
+pack1_masks = [
+    ['images', '*', ''],
+    ['data/*.cfg', '*', ''],
+    ['data/gui', '*', ''],
+    ['data/themes', '*.cfg', ''],
+    ['data/core', '*.cfg', ''],
+    ['data/COPYING.txt', '*', ''],
+    ['data/core/images/maps/wesnoth.png', '*', ''],
+    ['data/ai', '*', ''],
+    ['data/campaigns', '_main.cfg', ''],
+    ['sounds/button.wav', '*', ''],
+    ]
+
+pack2_masks = [
+    ['data', '*.cfg', ''],
+    ['data/core/images/terrain', '*', ''],
+    ['data/core/images/themes', '*', ''],
+    ['data/core/images/misc', '*', ''],
+    ['data/core/sounds', '*', ''],
+    ['data/lua', '*', ''],
+    ['sounds', '*', ''],
+    ]
+
+packs = [pack0_masks, pack1_masks, pack2_masks]
+
+
+all_files = set()
+
+def list_path_with_mask(path, mask, exclude_mask):
+    files = set()
+    if os.path.isdir(path):
+        for (dirpath, dirnames, filenames) in os.walk(path):
+            for filename in filenames:
+                if fnmatch.fnmatch(filename, mask) and not fnmatch.fnmatch(os.path.join(dirpath, filename), exclude_mask):
+                    files.add(os.path.join(dirpath, filename))
+    else:
+        if fnmatch.fnmatch(path, mask) and not fnmatch.fnmatch(path, exclude_mask):
+            files.add(path)
+        
+    return files
+
+def list_pack_contents(masks):
+    files = set()
+    for (root_path, mask, exclude_mask) in masks:
+        roots = glob.glob(root_path)
+        for root in roots:
+            new_files = list_path_with_mask(root, mask, exclude_mask).difference(all_files)
+            files.update(new_files)
+            all_files.update(new_files)
+    return files
+
+
+def build_pack(files, out):
+    fout = open(out, "w") 
+    out_list = []
+    sz = 0
+    for f in files:
+        data = open(f).read()
+        fout.write(data)
+        out_list.append('{"/%s", "/%s", %d},\n' % (f, out, sz))
+        sz += len(data)
+    fout.close()
+    print '%s: %d files, %d bytes total' % (out, len(files), sz)
+
+    return ''.join(out_list)
+
+
+
+base_dir = sys.argv[1]
+out_list = os.path.abspath(sys.argv[2])
+os.chdir(base_dir)
+
+# define additional packs
+
+packs.append([['data/core/images/units', '*', ''], ['data/core/images/attacks', '*', '']])
+
+for path in glob.glob(os.path.join(base_dir, 'data/campaigns/*')):
+    path = path[len(base_dir):]
+    print 'Campaign: ' + path
+    packs.append([[path, '*', '']])
+
+packs.append([['data/core/images/portraits', '*', '']])
+packs.append([['data/core/images', '*', '']])
+# packs.append([['data', '*', 'data/core/music/*']])
+
+
+# build packs
+fout_list = open(out_list, 'w')
+for (index, pack) in enumerate(packs):
+    pack_files = list_pack_contents(pack)
+    out_list_data = build_pack(pack_files, 'pack' + str(index))
+    fout_list.write(out_list_data)
+fout_list.write('{"", "", 0}\n')
+fout_list.close()
diff --git a/genfs.sh b/genfs.sh
new file mode 100755
index 0000000..60639f3
--- /dev/null
+++ b/genfs.sh
@@ -0,0 +1,7 @@
+#!/bin/bash
+BASE=$NACL_SDK_ROOT/toolchain/linux_x86/x86_64-nacl
+(cd $BASE/usr/local/share/wesnoth; find -type d) | perl -pe 's/^\.//' | perl -pe 's/^(.*)$/"$1",/' >ppapi/dirs_generated.cc
+echo "" >>ppapi/dirs_generated.cc
+(cd $BASE/usr/local/share/wesnoth; find -type f -printf "%p %s\n") | perl -pe 's/^\.//' | perl -pe 's/^(.*) (\d+)$/{"$1", $2},/' >ppapi/files_generated.cc
+echo '{"", 0}' >>ppapi/files_generated.cc
+
diff --git a/howto b/howto
new file mode 100644
index 0000000..39efb64
--- /dev/null
+++ b/howto
@@ -0,0 +1,6 @@
+rm wesnoth; NACL_SDK_ROOT=$HOME/native_client_sdk_0_6_1118 NACL_TOOLCHAIN_ROOT=$NACL_SDK_ROOT/toolchain/linux_x86 ./build.sh && ~/nativeclient/native_client/scons-out/opt-linux-x86-64/staging/ncval_stubout wesnoth -o ~/native_client_sdk_0_6_1118/toolchain/linux_x86/x86_64-nacl/usr/local/bin/wesnoth
+
+
+NACL_SDK_ROOT=$HOME/native_client_sdk_0_6_1118 NACL_TOOLCHAIN_ROOT=$NACL_SDK_ROOT/toolchain/linux_x86 ./genfs.sh
+
+./buildpack.py ~/native_client_sdk_0_6_1118/toolchain/linux_x86/x86_64-nacl/usr/local/share/wesnoth/ ppapi/packs_generated.cc
diff --git a/ppapi/SConscript b/ppapi/SConscript
new file mode 100644
index 0000000..68aacff
--- /dev/null
+++ b/ppapi/SConscript
@@ -0,0 +1,16 @@
+import commands, os
+from subprocess import Popen, PIPE
+from glob import glob
+
+Import("*")
+
+for env in [test_env, client_env, env]:
+    env.Append(CPPDEFINES = "$EXTRA_DEFINE")
+
+libwesnoth_ppapi_sources = Split("""
+    plugin.cc
+    """)
+
+libwesnoth_ppapi = env.Library("wesnoth_ppapi", libwesnoth_ppapi_sources)
+
+Export("libwesnoth_ppapi")
diff --git a/ppapi/plugin.cc b/ppapi/plugin.cc
new file mode 100644
index 0000000..f0199a3
--- /dev/null
+++ b/ppapi/plugin.cc
@@ -0,0 +1,194 @@
+// Copyright (c) 2011 The Native Client Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <ppapi/cpp/instance.h>
+#include <ppapi/cpp/module.h>
+#include <ppapi/cpp/rect.h>
+#include <ppapi/cpp/size.h>
+#include <ppapi/cpp/file_system.h>
+
+#include <SDL_video.h>
+extern int wesnoth_main(int argc, char **argv);
+#include <SDL.h>
+#include <SDL_nacl.h>
+
+#include <nacl-mounts/base/KernelProxy.h>
+#include <nacl-mounts/base/MainThreadRunner.h>
+#include <nacl-mounts/http2/HTTP2Mount.h>
+
+
+const char* http_dirs[] = {
+#include "dirs_generated.cc"
+};
+
+struct http_file_info {
+  const char* path;
+  size_t size;
+} http_files[] = {
+#include "files_generated.cc"
+};
+
+struct http_pack_info {
+  const char* path;
+  const char* pack_path;
+  off_t offset;
+} http_packs[] = {
+#include "packs_generated.cc"
+};
+
+
+class PluginInstance : public pp::Instance {
+ public:
+  explicit PluginInstance(PP_Instance instance) : pp::Instance(instance),
+                                                  sdl_main_thread_(0),
+                                                  width_(0),
+                                                  height_(0),
+                                                  progress_handler_(this) {
+    RequestInputEvents(PP_INPUTEVENT_CLASS_MOUSE);
+    RequestFilteringInputEvents(PP_INPUTEVENT_CLASS_KEYBOARD);
+
+    KernelProxy* proxy = KernelProxy::KPInstance();
+    MainThreadRunner* runner = new MainThreadRunner(this);
+
+    fprintf(stderr, "Requesting an HTML5 local persistent filesystem.\n");
+    fflush(stderr);
+    pp::FileSystem* fs = new pp::FileSystem(this, PP_FILESYSTEMTYPE_LOCALPERSISTENT);
+      
+    fprintf(stderr, "Initializing nacl-mounts.\n");
+    fflush(stderr);
+    HTTP2Mount* http2_mount = new HTTP2Mount(runner, "./usr/local/share/wesnoth");
+    http2_mount->SetLocalCache(fs, 350*1024*1024, "/wesnoth0");
+    http2_mount->SetProgressHandler(&progress_handler_);
+ 
+    fprintf(stderr, "Registering known files.\n");
+    fflush(stderr);
+    for (int i = 0; i < sizeof(http_dirs) / sizeof(*http_dirs); ++i) {
+      char* path = (char*)http_dirs[i];
+      if (path && *path)
+        http2_mount->AddDir(path);
+    }
+
+    for (int i = 0; i < sizeof(http_files) / sizeof(*http_files); ++i) {
+      char* path = (char*)http_files[i].path;
+      size_t size = http_files[i].size;
+      if (path && *path)
+        http2_mount->AddFile(path, size);
+    }
+
+    for (int i = 0; i < sizeof(http_packs) / sizeof(*http_packs); ++i) {
+      char* path = (char*)http_packs[i].path;
+      char* pack_path = (char*)http_packs[i].pack_path;
+      off_t offset = http_packs[i].offset;
+      if (path && *path) {
+        fflush(stderr);
+        http2_mount->SetInPack(path, pack_path, offset);
+      }
+    }
+
+    http2_mount->SetInMemory("/fonts/Andagii.ttf", true);
+    http2_mount->SetInMemory("/fonts/DejaVuSans.ttf", true);
+    http2_mount->SetInMemory("/fonts/wqy-zenhei.ttc", true);
+
+    fprintf(stderr, "Mounting the filesystem.\n");
+    fflush(stderr);
+    proxy->mkdir("/usr", 0777);
+    proxy->mkdir("/usr/local", 0777);
+    proxy->mkdir("/usr/local/share", 0777);
+    int res = proxy->mount("/usr/local/share/wesnoth", http2_mount);
+    if (!res) {
+      fprintf(stderr, "FS initialization success.\n");
+    } else {
+      fprintf(stderr, "FS initialization failure.\n");
+    }
+    fflush(stderr);
+  }
+
+  ~PluginInstance() {
+    if (sdl_main_thread_) {
+      pthread_join(sdl_main_thread_, NULL);
+    }
+  }
+
+  virtual void DidChangeView(const pp::Rect& position, const pp::Rect& clip) {
+    printf("did change view, new %dx%d, old %dx%d\n",
+        position.size().width(), position.size().height(),
+        width_, height_);
+
+    if (position.size().width() == width_ &&
+        position.size().height() == height_)
+      return;  // Size didn't change, no need to update anything.
+
+    if (sdl_thread_started_ == false) {
+      width_ = position.size().width();
+      height_ = position.size().height();
+
+      SDL_NACL_SetInstance(pp_instance(), width_, height_);
+      // It seems this call to SDL_Init is required. Calling from
+      // sdl_main() isn't good enough.
+      // Perhaps it must be called from the main thread?
+      int lval = SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);
+      assert(lval >= 0);
+      if (0 == pthread_create(&sdl_main_thread_, NULL, sdl_thread, this)) {
+        sdl_thread_started_ = true;
+      }
+    }
+  }
+
+  bool HandleInputEvent(const pp::InputEvent& event) {
+    SDL_NACL_PushEvent(event);
+    return true;
+  }
+
+  bool Init(int argc, const char* argn[], const char* argv[]) {
+    return true;
+  }
+
+ private:
+  bool sdl_thread_started_;
+  pthread_t sdl_main_thread_;
+  int width_;
+  int height_;
+
+  static void* sdl_thread(void* param) {
+    static char const * argv[] = {"wesnoth", NULL};
+    printf("starting game thread\n");
+    wesnoth_main(1, (char**)argv);
+    return NULL;
+  }
+
+  class ProgressHandler : public HTTP2ProgressHandler {
+  public:
+    pp::Instance* instance_;
+
+    ProgressHandler(pp::Instance* instance) : instance_(instance) {}
+
+    void HandleProgress(std::string& path, int64_t bytes, int64_t size) {
+      char buf[100];
+      snprintf(buf, sizeof(buf), "%llu,%llu", (unsigned long long)bytes,
+          (unsigned long long)size);
+      std::string message = "[\"" + path + "\"," + buf + "]";
+      instance_->PostMessage(message);
+    }
+  };
+
+  ProgressHandler progress_handler_;
+};
+
+class PepperModule : public pp::Module {
+public:
+  // Create and return a PluginInstanceInstance object.
+  virtual pp::Instance* CreateInstance(PP_Instance instance) {
+    return new PluginInstance(instance);
+  }
+};
+
+namespace pp {
+  Module* CreateModule() {
+    return new PepperModule();
+  }
+}  // namespace pp
diff --git a/scons/config_check_utils.py b/scons/config_check_utils.py
index b566791..5484ad5 100644
--- a/scons/config_check_utils.py
+++ b/scons/config_check_utils.py
@@ -14,5 +14,5 @@ def restore_env(env, backup):
 
 def find_include(prefixes, include_file, include_subdir, default_prefixes = True):
     if default_prefixes:
-        prefixes = ["/usr", "/usr/local", "/sw", "/sw/local"] + prefixes
+        prefixes = prefixes + ["/usr", "/usr/local", "/sw", "/sw/local"]
     return [(prefix, include) for prefix in prefixes for include in glob(join(prefix, "include", include_subdir, include_file))]
diff --git a/src/SConscript b/src/SConscript
index 1b61ede..9a01526 100644
--- a/src/SConscript
+++ b/src/SConscript
@@ -461,7 +461,7 @@ for env in [test_env, client_env, env]:
 
 game_cpp = client_env.Object("game.cpp", EXTRA_DEFINE = not env["pool_alloc"] and "DISABLE_POOL_ALLOC" or None);
 
-client_env.WesnothProgram("wesnoth", [game_cpp] + [libwesnoth_extras, libwesnoth_core, libwesnoth_sdl, libwesnoth, env["wesnoth_res"]], have_client_prereqs)
+client_env.WesnothProgram("wesnoth", [game_cpp] + [libwesnoth_extras, libwesnoth_core, libwesnoth_sdl, libwesnoth, libwesnoth_ppapi, env["wesnoth_res"]], have_client_prereqs)
 
 campaignd_sources = Split("""
     server/input_stream.cpp
diff --git a/src/asserts.hpp b/src/asserts.hpp
index 6a499a4..31b2ede 100644
--- a/src/asserts.hpp
+++ b/src/asserts.hpp
@@ -25,7 +25,8 @@
 #define BREAKPOINT() __debugbreak()
 #define WES_HALT() do { BREAKPOINT(); exit(1); } while (false)
 
-#elif defined(__GNUG__) && (defined(__i386__) || defined(__x86_64__))
+#elif defined(__GNUG__) && (defined(__i386__) || defined(__x86_64__)) \
+  && !defined(__native_client__)
 #define BREAKPOINT() asm("int3")
 #define WES_HALT() do { BREAKPOINT(); abort(); } while (false)
 
diff --git a/src/game.cpp b/src/game.cpp
index 580e545..985a976 100644
--- a/src/game.cpp
+++ b/src/game.cpp
@@ -2403,7 +2403,7 @@ void init_custom_malloc();
 }
 #endif
 
-int main(int argc, char** argv)
+int wesnoth_main(int argc, char** argv)
 {
 #ifndef DISABLE_POOL_ALLOC
 	init_custom_malloc();
@@ -2461,4 +2461,3 @@ int main(int argc, char** argv)
 
 	return 0;
 } // end main
-
