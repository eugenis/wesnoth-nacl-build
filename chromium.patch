Index: trusted/plugin/ppapi/scriptable_handle_ppapi.cc
===================================================================
--- trusted/plugin/ppapi/scriptable_handle_ppapi.cc	(revision 4920)
+++ trusted/plugin/ppapi/scriptable_handle_ppapi.cc	(working copy)
@@ -25,6 +25,17 @@
 
 namespace {
 
+bool HackyPluginMethod(const nacl::string& name) {
+  return
+      name == "__urlAsNaClDesc" ||
+      name == "__sendAsyncMessage0" ||
+      name == "__sendAsyncMessage1";
+}
+
+}  // namespace
+
+namespace {
+
 pp::Var Error(nacl::string call_name, const char* caller,
                      const char* error, pp::Var* exception) {
   nacl::stringstream error_stream;
@@ -78,7 +89,7 @@
   if (!name.is_string() && !name.is_int())
     return false;
   bool has_property = false;
-  if (scriptable_proxy_.is_undefined()) {
+  if (scriptable_proxy_.is_undefined() || HackyPluginMethod(NameAsString(name))) {
     has_property = HasCallType(PROPERTY_GET, NameAsString(name), "HasProperty");
   } else {
     has_property = scriptable_proxy_.HasProperty(name, exception);
@@ -95,7 +106,7 @@
   if (!name.is_string())
     return false;
   bool has_method = false;
-  if (scriptable_proxy_.is_undefined()) {
+  if (scriptable_proxy_.is_undefined() || HackyPluginMethod(NameAsString(name))) {
     has_method = HasCallType(METHOD_CALL, name.AsString(), "HasMethod");
   } else {
     has_method = scriptable_proxy_.HasMethod(name, exception);
@@ -281,7 +292,7 @@
     return pp::Var();
   assert(name.is_string());
   pp::Var return_var;
-  if (scriptable_proxy_.is_undefined()) {
+  if (scriptable_proxy_.is_undefined() || HackyPluginMethod(NameAsString(name))) {
     return_var = Invoke(METHOD_CALL, name.AsString(), "Call", args, exception);
   } else {
     uint32_t argc = static_cast<uint32_t>(args.size());
